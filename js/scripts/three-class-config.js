//
// base version of this file auto-generated by generate-class-config.js
// date: Wed Aug 31 2016 08:59:45 GMT-0700 (PDT)
//

var Types = require('./prop-types');

// NOTE: uuid properties are not generated, as they cannot be synced across
// several clients.

module.exports = {

    _defaults: require('./three-class-config-defaults'),

    // Three_Legacy: {
    //     relativePath: './Three.Legacy',
    // },
    // Three: {
    //     relativePath: './Three',
    // },

    AnimationClip: {
        relativePath: './animation/AnimationClip',
    },
    AnimationMixer: {
        relativePath: './animation/AnimationMixer',
    },
    AnimationObjectGroup: {
        relativePath: './animation/AnimationObjectGroup',
    },
    AnimationUtils: {
        relativePath: './animation/AnimationUtils',
    },
    KeyframeTrack: {
        relativePath: './animation/KeyframeTrack',
    },
    PropertyBinding: {
        relativePath: './animation/PropertyBinding',
    },
    PropertyMixer: {
        relativePath: './animation/PropertyMixer',
    },
    Audio: {
        relativePath: './audio/Audio',
    },
    AudioAnalyser: {
        relativePath: './audio/AudioAnalyser',
    },
    AudioBuffer: {
        relativePath: './audio/AudioBuffer',
    },
    AudioListener: {
        relativePath: './audio/AudioListener',
    },
    PositionalAudio: {
        relativePath: './audio/PositionalAudio',
    },
    Camera: {
        relativePath: './cameras/Camera',
        superClass: 'Object3D',
        properties: {
            matrixWorldInverse: new Types.Matrix4(),
            projectionMatrix:   new Types.Matrix4(),
        },
        propsDefinedByThree: [ 'matrixWorldInverse', 'projectionMatrix' ],
    },
    CubeCamera: {
        relativePath: './cameras/CubeCamera',
        superClass: 'Object3D',
    },
    OrthographicCamera: {
        relativePath: './cameras/OrthographicCamera',
        superClass: 'Camera',
        properties: {
            zoom:   new Types.Float(1.0),
            left:   new Types.Float(),
            right:  new Types.Float(),
            top:    new Types.Float(),
            bottom: new Types.Float(),
            near:   new Types.Float(0.1),
            far:    new Types.Float(2000),
        },
        constructorArgs: [ 'left', 'right', 'top', 'bottom', 'near', 'far' ],
    },
    PerspectiveCamera: {
        relativePath: './cameras/PerspectiveCamera',
        superClass: 'Camera',
        properties: {
            fov:        new Types.Float(50.0),
            zoom:       new Types.Float(1.0),
            near:       new Types.Float(0.1),
            far:        new Types.Float(2000),
            focus:      new Types.Float(10.0),
            aspect:     new Types.Float(1.0),
            // view:       new Types.Dict(),
            // filmGauge:  new Types.Float(35.0),
            // filmOffset: new Types.Float(0.0),
        },
        constructorArgs: [ 'fov', 'aspect', 'near', 'far' ],
    },
    StereoCamera: {
        relativePath: './cameras/StereoCamera',
    },
    Controls: {
        relativePath: './controls/Controls',
        properties: {
            controlling: new Types.ThreeType('Object3D', {allowNull: false}),
        },
    },
    OrbitControls: {
        relativePath: './controls/OrbitControls',
        superClass: 'Controls',
        properties: {
            enabled: new Types.Bool(true),

            minDistance: new Types.Float(0),
            maxDistance: new Types.Float(Infinity),

            minZoom: new Types.Float(0),
            maxZoom: new Types.Float(Infinity),

            minPolarAngle: new Types.Float(0), // radians
            maxPolarAngle: new Types.Float(Math.PI), // radians

            minAzimuthAngle: new Types.Float(-Infinity), // radians
            maxAzimuthAngle: new Types.Float(Infinity), // radians

            enableDamping: new Types.Bool(false),
            dampingFactor: new Types.Float(0.25),

            enableZoom: new Types.Bool(true),
            zoomSpeed: new Types.Float(1.0),

            enableRotate: new Types.Bool(true),
            rotateSpeed: new Types.Float(1.0),

            enablePan: new Types.Bool(true),
            keyPanSpeed: new Types.Float(7.0), // pixels moved per arrow key push

            autoRotate: new Types.Bool(false),
            autoRotateSpeed: new Types.Float(2.0), // 30 seconds per round when fps is 60

            enableKeys: new Types.Bool(true),

            target: new Types.Vector3(0, 0, 0),
        },
        constructorArgs: ['controlling'],
    },
    TrackballControls: {
        relativePath: './controls/TrackballControls',
        superClass: 'Controls',
        properties: {
            enabled: new Types.Bool(true),

            minDistance: new Types.Float(0),
            maxDistance: new Types.Float(Infinity),

            rotateSpeed: new Types.Float(1.0),
            zoomSpeed: new Types.Float(1.2),
            panSpeed: new Types.Float(0.3),

            staticMoving: new Types.Bool(false),
            dynamicDampingFactor: new Types.Float(0.2),

            noRotate: new Types.Bool(false),
            noZoom: new Types.Bool(false),
            noPan: new Types.Bool(false),
            noRoll: new Types.Bool(false),

            target: new Types.Vector3(0, 0, 0),
        },
    },
    FlyControls: {
        relativePath: './controls/FlyControls',
        superClass: 'Controls',
        properties: {
            forward_speed: new Types.Float(0),
            lateral_speed: new Types.Float(0),
            upward_speed: new Types.Float(0),
            roll: new Types.Float(0),
            pitch: new Types.Float(0),
            yaw: new Types.Float(0),
        },
    },
    Picker: {
        relativePath: './controls/Picker',
        superClass: 'Controls',
        properties: {
            event: new Types.String('click'),
            root: new Types.ThreeType('Object3D', {allowNull: true}),
            all: new Types.Bool(false)
        },
        propsDefinedByThree: [ 'distance', 'point', 'face', 'faceNormal', 'faceVertices',
                               'faceIndex', 'object', 'picked'],
    },

    BufferAttribute: {
        relativePath: './core/BufferAttribute',
        properties: {
            array:       new Types.ArrayBuffer(),
            dynamic:     new Types.Bool(false),
            itemSize:    new Types.Int(1),
            count:       new Types.Int(0),
            needsUpdate: new Types.Bool(false),
            normalized:  new Types.Bool(true),
            version:     new Types.Int(-1),
        },
        constructorArgs: [ 'array', 'itemSize', 'normalized' ],
        propsDefinedByThree: [ 'count', 'version' ]
    },
    BufferGeometry: {
        relativePath: './core/BufferGeometry',
        properties: {
            name:       new Types.String(''),
            type:       new Types.String(''),
            attributes: new Types.BufferAttributeDict(),
            position:   new Types.BufferAttribute(),
            normal:     new Types.BufferAttribute(),
            color:      new Types.BufferAttribute(),
            index:      new Types.BufferAttribute(),
        },
        propsDefinedByThree: [ 'type' ]
    },
    Clock: {
        relativePath: './core/Clock',
    },
    DirectGeometry: {
        relativePath: './core/DirectGeometry',
    },
    EventDispatcher: {
        relativePath: './core/EventDispatcher',
    },
    Face3: {
        relativePath: './core/Face3',
        properties: {
            a: new Types.Int(0),
            b: new Types.Int(1),
            c: new Types.Int(2),
            normal: new Types.Vector3(),
            color: new Types.Color('#ffffff'),
            // TODO: arrays of vectors/colors
            // vertexNormals: new Types.ThreeTypeArray('Vector3')
            // vertexColors: new Types.ThreeTypeArray('Color')
            materialIndex: new Types.Int(0),
        },
        constructorArgs: [ 'a', 'b', 'c', 'normal', 'color', 'materialIndex' ],
    },
    Geometry: {
        relativePath: './core/Geometry',
        properties: {
            // TODO: id not supported as it conflicts with backbone's id
            // id: new Types.String(''),
            name: new Types.String(''),
            type: new Types.String(''),

            // By default Geometry does not sync geometry arrays
            // Use the custom class PlainGeometry to access those arrays
        },
        propsDefinedByThree: [ 'type' ]
    },
    PlainGeometry: {
        relativePath: './geometries/PlainGeometry',
        superClass: 'Geometry',
        properties: {
            vertices: new Types.VectorArray(),
            colors: new Types.ColorArray(),
            faces: new Types.FaceArray(),
            faceVertexUvs: new Types.Array(),
            lineDistances: new Types.Array(),
            morphTargets: new Types.Array(),
            morphNormals: new Types.Array(),
            skinWeights: new Types.Array(),
            skinIndices: new Types.Array(),
        },
    },
    InstancedBufferAttribute: {
        relativePath: './core/InstancedBufferAttribute',
    },
    InstancedBufferGeometry: {
        relativePath: './core/InstancedBufferGeometry',
    },
    InstancedInterleavedBuffer: {
        relativePath: './core/InstancedInterleavedBuffer',
    },
    InterleavedBuffer: {
        relativePath: './core/InterleavedBuffer',
    },
    InterleavedBufferAttribute: {
        relativePath: './core/InterleavedBufferAttribute',
    },
    Layers: {
        relativePath: './core/Layers',
    },
    Object3D: {
        relativePath: './core/Object3D',
        properties: {
            // TODO: id not supported as it conflicts with backbone's id
            // id: new Types.String(''),
            name:                   new Types.String(''),
            type:                   new Types.String(''),
            parent:                 new Types.ThreeType('this'),
            children:               new Types.ThreeTypeArray('this'),
            up:                     new Types.Vector3(0, 1, 0),
            position:               new Types.Vector3(),
            rotation:               new Types.ThreeType('Euler'),
            quaternion:             new Types.Vector4(0, 0, 0, 1),
            scale:                  new Types.Vector3(1, 1, 1),
            modelViewMatrix:        new Types.Matrix4(),
            normalMatrix:           new Types.Matrix3(),
            matrix:                 new Types.Matrix4(),
            matrixWorld:            new Types.Matrix4(),
            matrixAutoUpdate:       new Types.Bool(true),
            matrixWorldNeedsUpdate: new Types.Bool(false),
            visible:                new Types.Bool(true),
            castShadow:             new Types.Bool(false),
            receiveShadow:          new Types.Bool(false),
            frustumCulled:          new Types.Bool(true),
            renderOrder:            new Types.Int(0),
        },
        propsDefinedByThree: [ 'type' ]
    },
    Raycaster: {
        relativePath: './core/Raycaster',
        properties: {
            origin: new Types.Vector3(),
            direction: new Types.Vector3(),
            near: new Types.Float(0.0),
            far: new Types.Float(1000000.0),
            ray: new Types.ThreeType('Ray'),
            linePrecision: new Types.Float(1.0),
        },
        constructorArgs: [ 'origin', 'direction', 'near', 'far' ],
    },
    Uniform: {
        relativePath: './core/Uniform',
    },
    CurveUtils: {
        relativePath: './extras/CurveUtils',
    },
    SceneUtils: {
        relativePath: './extras/SceneUtils',
    },
    ShapeUtils: {
        relativePath: './extras/ShapeUtils',
    },
    AmbientLight: {
        relativePath: './lights/AmbientLight',
        superClass: 'Light',
        constructorArgs: [ 'color', 'intensity' ],
    },
    DirectionalLight: {
        relativePath: './lights/DirectionalLight',
        superClass: 'Light',
        properties: {
            target:      new Types.InitializedThreeType('Object3D', {args: '()', nullable: false}),
            // TODO: shadows
            // shadow:      new Types.ThreeType('LightShadow'),
            castsShadow: new Types.Bool(false),
        },
        constructorArgs: [ 'color', 'intensity' ],
        propsDefinedByThree: [ 'target' ]
    },
    HemisphereLight: {
        relativePath: './lights/HemisphereLight',
        superClass: 'Light',
        properties: {
            groundColor: new Types.Color('#000000'),
        },
        constructorArgs: [ 'color', 'groundColor', 'intensity' ],
    },
    Light: {
        relativePath: './lights/Light',
        superClass: 'Object3D',
        properties: {
            color:     new Types.Color('#ffffff'),
            intensity: new Types.Float(1.0),
        },
        constructorArgs: [ 'color', 'intensity' ],
    },
    LightShadow: {
        relativePath: './lights/LightShadow',
    },
    PointLight: {
        relativePath: './lights/PointLight',
        superClass: 'Light',
        properties: {
            power:    new Types.Float(4.0 * Math.PI),
            distance: new Types.Float(0.0),
            decay:    new Types.Float(1.0),
            // TODO: shadows
            // shadow:   new Types.ThreeType('LightShadow'),
        },
        constructorArgs: [ 'color', 'intensity', 'distance', 'decay' ],
    },
    SpotLight: {
        relativePath: './lights/SpotLight',
        superClass: 'Light',
        properties: {
            target:   new Types.InitializedThreeType('Object3D', {args: '()', nullable: false}),
            distance: new Types.Float(0.0),
            angle:    new Types.Float(Math.PI / 3.0),
            penumbra: new Types.Float(0.0),
            decay:    new Types.Float(1.0),
            // TODO: shadows
            // shadow:   new Types.ThreeType('LightShadow'),
        },
        constructorArgs: [ 'color', 'intensity', 'distance', 'angle', 'penumbra', 'decay' ],
        propsDefinedByThree: [ 'target' ]
    },
    AnimationLoader: {
        relativePath: './loaders/AnimationLoader',
    },
    BinaryTextureLoader: {
        relativePath: './loaders/BinaryTextureLoader',
    },
    BufferGeometryLoader: {
        relativePath: './loaders/BufferGeometryLoader',
    },
    Cache: {
        relativePath: './loaders/Cache',
    },
    CompressedTextureLoader: {
        relativePath: './loaders/CompressedTextureLoader',
    },
    CubeTextureLoader: {
        relativePath: './loaders/CubeTextureLoader',
    },
    FontLoader: {
        relativePath: './loaders/FontLoader',
    },
    ImageLoader: {
        relativePath: './loaders/ImageLoader',
    },
    JSONLoader: {
        relativePath: './loaders/JSONLoader',
    },
    Loader: {
        relativePath: './loaders/Loader',
    },
    LoadingManager: {
        relativePath: './loaders/LoadingManager',
    },
    MaterialLoader: {
        relativePath: './loaders/MaterialLoader',
    },
    ObjectLoader: {
        relativePath: './loaders/ObjectLoader',
    },
    TextureLoader: {
        relativePath: './loaders/TextureLoader',
    },
    XHRLoader: {
        relativePath: './loaders/XHRLoader',
    },
    // NOTE: the constructor arg, 'parameters' is special-cased in our wrapper generator
    //       it will be auto-detected, and properly generate the constructor dict arg
    //       containing all props of the model
    LineBasicMaterial: {
        relativePath: './materials/LineBasicMaterial',
        superClass: 'Material',
        properties: {
            color:        new Types.Color('#ffffff'),
            lights:       new Types.Bool(false),
            linewidth:    new Types.Float(1.0),
            linecap:      new Types.String('round'),
            linejoin:     new Types.String('round'),
            vertexColors: new Types.Enum('Colors', 'NoColors'),
        },
        constructorArgs: [ 'parameters' ],
    },
    LineDashedMaterial: {
        relativePath: './materials/LineDashedMaterial',
        superClass: 'Material',
        properties: {
            color:        new Types.Color('#ffffff'),
            lights:       new Types.Bool(false),
            linewidth:    new Types.Float(1.0),
            scale:        new Types.Float(1.0),
            dashSize:     new Types.Float(3.0),
            gapSize:      new Types.Float(1.0),
            vertexColors: new Types.Enum('Colors', 'NoColors'),
        },
        constructorArgs: [ 'parameters' ],
    },
    Material: {
        relativePath: './materials/Material',
        properties: {
            name:                new Types.String(''),
            opacity:             new Types.Float(1.0),
            transparent:         new Types.Bool(false),
            blending:            new Types.Enum('BlendingMode', 'NormalBlending'),
            blendSrc:            new Types.Enum('BlendFactors', 'SrcAlphaFactor'),
            blendDst:            new Types.Enum('BlendFactors', 'OneMinusSrcAlphaFactor'),
            blendEquation:       new Types.Enum('Equations', 'AddEquation'),
            depthTest:           new Types.Bool(true),
            depthFunc:           new Types.Enum('DepthMode', 'LessEqualDepth'),
            depthWrite:          new Types.Bool(true),
            polygonOffset:       new Types.Bool(false),
            polygonOffsetFactor: new Types.Float(0),
            polygonOffsetUnits:  new Types.Float(0),
            alphaTest:           new Types.Float(0.0),
            clippingPlanes:      new Types.ThreeTypeArray('Plane'),
            clipShadows:         new Types.Bool(false),
            overdraw:            new Types.Float(0),
            visible:             new Types.Bool(true),
            side:                new Types.Enum('Side', 'FrontSide'),
            fog:                 new Types.Bool(true),
            lights:              new Types.Bool(true),
        },
        propsDefinedByThree: [ 'type' ]
    },
    MeshBasicMaterial: {
        relativePath: './materials/MeshBasicMaterial',
        superClass: 'Material',
        properties: {
            color:              new Types.Color('#ffffff'),
            map:                new Types.ThreeType('Texture'),
            aoMap:              new Types.ThreeType('Texture'),
            aoMapIntensity:     new Types.Float(1),
            specularMap:        new Types.ThreeType('Texture'),
            alphaMap:           new Types.ThreeType('Texture'),
            envMap:             new Types.ThreeType('Texture'),
            combine:            new Types.Enum('Operations', 'MultiplyOperation'),
            reflectivity:       new Types.Float(1),
            refractionRatio:    new Types.Float(0.98),
            fog:                new Types.Bool(true),
            shading:            new Types.Enum('Shading', 'SmoothShading'),
            wireframe:          new Types.Bool(false),
            wireframeLinewidth: new Types.Float(1),
            wireframeLinecap:   new Types.String('round'), // TODO: enum?
            wireframeLinejoin:  new Types.String('round'),
            vertexColors:       new Types.Enum('Colors', 'NoColors'),
            skinning:           new Types.Bool(false),
            morphTargets:       new Types.Bool(false),
            lights:             new Types.Bool(false),
        },
        constructorArgs: [ 'parameters' ],
    },
    MeshDepthMaterial: {
        relativePath: './materials/MeshDepthMaterial',
        superClass: 'Material',
        properties: {
            morphTargets:       new Types.Bool(false),
            wireframe:          new Types.Bool(false),
            wireframeLinewidth: new Types.Float(1.0),
            lights:             new Types.Bool(false),
        },
        constructorArgs: [ 'parameters' ],
    },
    MeshLambertMaterial: {
        relativePath: './materials/MeshLambertMaterial',
        superClass: 'Material',
        properties: {
            color:              new Types.String('#ffffff'),
            map:                new Types.ThreeType('Texture'),
            lightMap:           new Types.ThreeType('Texture'),
            lightMapIntensity:  new Types.Float(1.0),
            aoMap:              new Types.ThreeType('Texture'),
            aoMapIntensity:     new Types.Float(1.0),
            emissive:           new Types.Color('#000000'),
            emissiveMap:        new Types.ThreeType('Texture'),
            emissiveIntensity:  new Types.Float(1.0),
            specularMap:        new Types.ThreeType('Texture'),
            alphaMap:           new Types.ThreeType('Texture'),
            envMap:             new Types.ThreeType('Texture'),
            combine:            new Types.Enum('Operations', 'MultiplyOperation'),
            reflectivity:       new Types.Float(1.0),
            refractionRatio:    new Types.Float(0.98),
            fog:                new Types.Bool(false),
            wireframe:          new Types.Bool(false),
            wireframeLinewidth: new Types.Float(1.0),
            wireframeLinecap:   new Types.String('round'),
            wireframeLinejoin:  new Types.String('round'),
            vertexColors:       new Types.Enum('Colors', 'NoColors'),
            skinning:           new Types.Bool(false),
            morphTargets:       new Types.Bool(false),
            morphNormals:       new Types.Bool(false),
        },
        constructorArgs: [ 'parameters' ],
    },
    MeshNormalMaterial: {
        relativePath: './materials/MeshNormalMaterial',
        superClass: 'Material',
        properties: {
            wireframe: new Types.Bool(false),
            wireframeLinewidth: new Types.Float(1.0),
            morphTargets: new Types.Bool(false),
            lights:       new Types.Bool(false),
        },
        constructorArgs: [ 'parameters' ],
    },
    MeshPhongMaterial: {
        relativePath: './materials/MeshPhongMaterial',
        superClass: 'Material',
        properties: {
            color:              new Types.String('#ffffff'),
            specular:           new Types.Color('#111111'),
            shininess:          new Types.Float(30.0),
            map:                new Types.ThreeType('Texture'),
            lightMap:           new Types.ThreeType('Texture'),
            lightMapIntensity:  new Types.Float(1.0),
            aoMap:              new Types.ThreeType('Texture'),
            aoMapIntensity:     new Types.Float(1.0),
            emissive:           new Types.Color('#000000'),
            emissiveMap:        new Types.ThreeType('Texture'),
            emissiveIntensity:  new Types.Float(1.0),
            bumpMap:            new Types.ThreeType('Texture'),
            bumpScale:          new Types.Float(1.0),
            normalMap:          new Types.ThreeType('Texture'),
            normalScale:        new Types.Vector2(1, 1),
            displacementMap:    new Types.ThreeType('Texture'),
            displacementScale:  new Types.Float(1.0),
            displacementBias:   new Types.Float(0.0),
            specularMap:        new Types.ThreeType('Texture'),
            alphaMap:           new Types.ThreeType('Texture'),
            envMap:             new Types.ThreeType('Texture'),
            combine:            new Types.Enum('Operations', 'MultiplyOperation'),
            reflectivity:       new Types.Float(1.0),
            refractionRatio:    new Types.Float(0.98),
            fog:                new Types.Bool(false),
            shading:            new Types.Enum('Shading', 'SmoothShading'),
            wireframe:          new Types.Bool(false),
            wireframeLinewidth: new Types.Float(1.0),
            wireframeLinecap:   new Types.String('round'),
            wireframeLinejoin:  new Types.String('round'),
            vertexColors:       new Types.Enum('Colors', 'NoColors'),
            skinning:           new Types.Bool(false),
            morphTargets:       new Types.Bool(false),
            morphNormals:       new Types.Bool(false),
        },
        constructorArgs: [ 'parameters' ],
    },
    MeshPhysicalMaterial: {
        relativePath: './materials/MeshPhysicalMaterial',
        superClass: 'MeshStandardMaterial',
        properties: {
            clearCoat:          new Types.Float(0.0),
            clearCoatRoughness: new Types.Float(0.0),
            reflectivity:       new Types.Float(0.5),
        },
        propsDefinedByThree: ['isMeshPhysicalMaterial'],
    },
    MeshStandardMaterial: {
        relativePath: './materials/MeshStandardMaterial',
        superClass: 'Material',
        properties: {
            color:              new Types.Color('#ffffff'),
            roughness:          new Types.Float(0.5),
            metalness:          new Types.Float(0.5),
            map:                new Types.ThreeType('Texture'),
            lightMap:           new Types.ThreeType('Texture'),
            lightMapIntensity:  new Types.Float(1.0),
            aoMap:              new Types.ThreeType('Texture'),
            aoMapIntensity:     new Types.Float(1),
            emissive:           new Types.Color('#000000'),
            emissiveMap:        new Types.ThreeType('Texture'),
            emissiveIntensity:  new Types.Float(1.0),
            bumpMap:            new Types.ThreeType('Texture'),
            bumpScale:          new Types.Float(1.0),
            normalMap:          new Types.ThreeType('Texture'),
            // TODO:
            // normalMapScale:     new Types.Array([ 1, 1 ]),
            displacementMap:    new Types.ThreeType('Texture'),
            displacementScale:  new Types.Float(1.0),
            displacementBias:   new Types.Float(0.0),
            roughnessMap:       new Types.ThreeType('Texture'),
            metalnessMap:       new Types.ThreeType('Texture'),
            alphaMap:           new Types.ThreeType('Texture'),
            envMap:             new Types.ThreeType('Texture'),
            envMapIntensity:    new Types.Float(1.0),
            refractionRatio:    new Types.Float(0.98),
            fog:                new Types.Bool(true),
            shading:            new Types.Enum('Shading', 'SmoothShading'),
            wireframe:          new Types.Bool(false),
            wireframeLinewidth: new Types.Float(1),
            wireframeLinecap:   new Types.String('round'), // TODO: enum?
            wireframeLinejoin:  new Types.String('round'),
            vertexColors:       new Types.Enum('Colors', 'NoColors'),
            skinning:           new Types.Bool(false),
            morphTargets:       new Types.Bool(false),
            morphNormals:       new Types.Bool(false),
        },
        constructorArgs: [ 'parameters' ],
    },
    MultiMaterial: {
        relativePath: './materials/MultiMaterial',
        properties: {
            materials: new Types.ThreeTypeArray('Material')
        },
        constructorArgs: [ 'parameters' ],
    },
    PointsMaterial: {
        relativePath: './materials/PointsMaterial',
        superClass: 'Material',
        properties: {
            color:           new Types.Color('#ffffff'),
            map:             new Types.ThreeType('Texture'),
            size:            new Types.Float(1.0),
            sizeAttenuation: new Types.Bool(true),
            vertexColors:    new Types.Enum('Colors', 'NoColors'),
        },
        constructorArgs: [ 'parameters' ],
    },
    RawShaderMaterial: {
        relativePath: './materials/RawShaderMaterial',
        superClass: 'ShaderMaterial',
        properties: {},
        constructorArgs: [ 'parameters' ],
    },
    ShaderMaterial: {
        relativePath: './materials/ShaderMaterial',
        superClass: 'Material',
        properties: {
            uniforms:       new Types.Dict(),
            // TODO: no longer supported by THREE.js
            // attributes
            vertexShader:   new Types.String(''),
            fragmentShader: new Types.String(''),
        },
        constructorArgs: [ 'parameters' ],
    },
    SpriteMaterial: {
        relativePath: './materials/SpriteMaterial',
        superClass: 'Material',
        properties: {
            color:    new Types.Color('#ffffff'),
            map:      new Types.ThreeType('Texture'),
            rotation: new Types.Float(0.0),
        },
        constructorArgs: [ 'parameters' ],
    },
    Box2: {
        relativePath: './math/Box2',
        properties: {
            min: new Types.Vector2(),
            max: new Types.Vector2(),
        },
        constructorArgs: [ 'min', 'max' ],
    },
    Box3: {
        relativePath: './math/Box3',
        properties: {
            min: new Types.Vector3(),
            max: new Types.Vector3(),
        },
        constructorArgs: [ 'min', 'max' ],

    },
    Color: {
        relativePath: './math/Color',
        properties: {
            r: new Types.Float(1.0),
            g: new Types.Float(1.0),
            b: new Types.Float(1.0),
        },
        constructorArgs: [ 'r', 'g', 'b' ],
    },
    Cylindrical: {
        relativePath: './math/Cylindrical',
        properties: {
            radius: new Types.Float(1.0),
            theta:  new Types.Float(0.),
            y:      new Types.Float(0.),
        },
        constructorArgs: ['radius', 'theta', 'y'],
    },
    Euler: {
        relativePath: './math/Euler',
        properties: {
            x: new Types.Float(0),
            y: new Types.Float(0),
            z: new Types.Float(0),
            order: new Types.String('XYZ'),
        },
        constructorArgs: [ 'x', 'y', 'z', 'order' ],
    },
    Frustum: {
        relativePath: './math/Frustum',
        properties: {
            p0: new Types.ThreeType('Plane'),
            p1: new Types.ThreeType('Plane'),
            p2: new Types.ThreeType('Plane'),
            p3: new Types.ThreeType('Plane'),
            p4: new Types.ThreeType('Plane'),
            p5: new Types.ThreeType('Plane'),
        },
        constructorArgs: [ 'p0', 'p1', 'p2', 'p3', 'p4', 'p5' ],
    },
    Interpolant: {
        relativePath: './math/Interpolant',
    },
    Line3: {
        relativePath: './math/Line3',
        properties: {
            start: new Types.Vector3(),
            end: new Types.Vector3(),
        },
        constructorArgs: [ 'start', 'end' ],
    },
    Math: {
        relativePath: './math/Math',
    },
    Matrix3: {
        relativePath: './math/Matrix3',
        properties: {
            elements: new Types.Array(),
        },
    },
    Matrix4: {
        relativePath: './math/Matrix4',
        properties: {
            elements: new Types.Array(),
        },
    },
    Plane: {
        relativePath: './math/Plane',
        properties: {
            normal: new Types.Vector3(),
            constant: new Types.Float(0.0),
        },
        constructorArgs: [ 'normal', 'constant' ],
    },
    Quaternion: {
        relativePath: './math/Quaternion',
        properties: {
            x: new Types.Float(0.0),
            y: new Types.Float(0.0),
            z: new Types.Float(0.0),
            w: new Types.Float(1.0),
        },
        constructorArgs: [ 'x', 'y', 'z', 'w' ],
    },
    Ray: {
        relativePath: './math/Ray',
        properties: {
            origin: new Types.Vector3(),
            direction: new Types.Vector3(),
        },
        constructorArgs: [ 'origin', 'direction' ],
    },
    Sphere: {
        relativePath: './math/Sphere',
        properties: {
            center: new Types.Vector3(),
            radius: new Types.Float(0.0),
        },
        constructorArgs: [ 'center', 'radius' ],
    },
    Spherical: {
        relativePath: './math/Spherical',
    },
    Spline: {
        relativePath: './math/Spline',
        properties: {
            points: new Types.ThreeTypeArray('Vector3'),
        },
        constructorArgs: [ 'points' ],
    },
    Triangle: {
        relativePath: './math/Triangle',
        properties: {
            a: new Types.Vector3(),
            b: new Types.Vector3(),
            c: new Types.Vector3(),
        },
        constructorArgs: [ 'a', 'b', 'c' ],
    },
    Vector2: {
        relativePath: './math/Vector2',
        properties: {
            x: new Types.Float(),
            y: new Types.Float(),
        },
        constructorArgs: [ 'x', 'y' ],
    },
    Vector3: {
        relativePath: './math/Vector3',
        properties: {
            x: new Types.Float(),
            y: new Types.Float(),
            z: new Types.Float(),
        },
        constructorArgs: [ 'x', 'y', 'z' ],
    },
    Vector4: {
        relativePath: './math/Vector4',
        properties: {
            x: new Types.Float(),
            y: new Types.Float(),
            z: new Types.Float(),
            w: new Types.Float(),
        },
        constructorArgs: [ 'x', 'y', 'z', 'w' ],
    },
    Bone: {
        relativePath: './objects/Bone',
    },
    Group: {
        relativePath: './objects/Group',
        superClass: 'Object3D',
    },
    LOD: {
        relativePath: './objects/LOD',
    },
    LensFlare: {
        relativePath: './objects/LensFlare',
    },
    Line: {
        relativePath: './objects/Line',
        superClass: 'Object3D',
        constructorArgs: [ 'geometry', 'material' ],
        properties: {
            material: new Types.ThreeType('Material'),
            geometry: new Types.ThreeType(['Geometry', 'BufferGeometry']),
        }
    },
    LineLoop: {
        relativePath: './objects/LineLoop',
        superClass: 'Line',
        constructorArgs: [ 'geometry', 'material' ],
    },
    LineSegments: {
        relativePath: './objects/LineSegments',
        superClass: 'Line',
        constructorArgs: [ 'geometry', 'material' ],
    },
    Mesh: {
        relativePath: './objects/Mesh',
        superClass: 'Object3D',
        constructorArgs: [ 'geometry', 'material' ],
        properties: {
            material: new Types.ThreeType('Material', {allowNull: false}),
            geometry: new Types.ThreeType(['Geometry', 'BufferGeometry'], {allowNull: false}),
            drawMode: new Types.Enum('DrawModes', 'TrianglesDrawMode'),
        }
    },
    Points: {
        relativePath: './objects/Points',
    },
    Skeleton: {
        relativePath: './objects/Skeleton',
    },
    SkinnedMesh: {
        relativePath: './objects/SkinnedMesh',
    },
    Sprite: {
        relativePath: './objects/Sprite',
        superClass: 'Object3D',
        constructorArgs: [ 'material' ],
        properties: {
            material: new Types.ThreeType('SpriteMaterial'),
        },
        propsDefinedByThree: [ 'isSprite' ]
    },
    WebGLRenderTarget: {
        relativePath: './renderers/WebGLRenderTarget',
    },
    WebGLRenderTargetCube: {
        relativePath: './renderers/WebGLRenderTargetCube',
    },
    WebGLRenderer: {
        relativePath: './renderers/WebGLRenderer',
    },
    Fog: {
        relativePath: './scenes/Fog',
    },
    FogExp2: {
        relativePath: './scenes/FogExp2',
    },
    Scene: {
        relativePath: './scenes/Scene',
        superClass: 'Object3D',
        properties: {
            fog: new Types.ThreeType('Fog'),
            overrideMaterial: new Types.ThreeType('Material'),
            autoUpdate: new Types.Bool(true),
        },
    },
    Texture: {
        relativePath: './textures/Texture',
        properties: {
            // TODO: id not supported as it conflicts with backbone's id
            // id: new Types.String(''),
            name:             new Types.String(''),
            mapping:          new Types.Enum('MappingModes', 'UVMapping'),
            wrapS:            new Types.Enum('WrappingModes', 'ClampToEdgeWrapping'),
            wrapT:            new Types.Enum('WrappingModes', 'ClampToEdgeWrapping'),
            magFilter:        new Types.Enum('Filters', 'LinearFilter'),
            minFilter:        new Types.Enum('Filters', 'LinearMipMapLinearFilter'),
            format:           new Types.Enum('PixelFormats', 'RGBAFormat'),
            type:             new Types.Enum('DataTypes', 'UnsignedByteType'),
            anisotropy:       new Types.Float(1.0),
            repeat:           new Types.Vector2(1.0, 1.0),
            offset:           new Types.Vector2(0.0, 0.0),
            generateMipmaps:  new Types.Bool(true),
            premultiplyAlpha: new Types.Bool(false),
            flipY:            new Types.Bool(true),
            unpackAlignment:  new Types.Int(4), // from three docs: valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
            encoding:         new Types.Enum('TextureEncodings', 'LinearEncoding'),
            version:          new Types.Int(0),
        },
        // As the image property is not exposed, we don't define constructorArgs.
        // The image property is hidden, as it does not have a good corresponding python type (yet)
        //constructorArgs: [ 'image', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'format', 'type', 'anisotropy' ],
        propsDefinedByThree: [ 'id', 'version' ],
    },
    CanvasTexture: {
        relativePath: './textures/CanvasTexture',
        superClass: 'Texture',
    },
    CompressedTexture: {
        relativePath: './textures/CompressedTexture',
        superClass: 'Texture',
    },
    CubeTexture: {
        relativePath: './textures/CubeTexture',
        superClass: 'Texture',
    },
    DataTexture: {
        relativePath: './textures/DataTexture',
        superClass: 'Texture',
        properties: {
            // this.image = { data: data, width: width, height: height };
            data:            new Types.ArrayBuffer(),
            width:           new Types.Int(0),
            height:          new Types.Int(0),
            minFilter:       new Types.Enum('Filters', 'NearestFilter'), // override default
            magFilter:       new Types.Enum('Filters', 'NearestFilter'), // override default
            flipY:           new Types.Bool(false), // override default
            generateMipmaps: new Types.Bool(false),
        },
        constructorArgs: [ 'data', 'width', 'height', 'format', 'type', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'anisotropy' ],
    },
    ImageTexture: {
        relativePath: './textures/ImageTexture',
        superClass: 'Texture',
        properties: {
            imageUri: new Types.String(''),
        },
        constructorArgs: [ 'imageUri', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'format', 'type', 'anisotropy' ],
    },
    TextTexture: {
        relativePath: './textures/TextTexture',
        superClass: 'Texture',
        properties: {
            color: new Types.Color('white'),
            fontFace: new Types.String('Arial'),
            size: new Types.Int(12),
            string: new Types.String(''),
            squareTexture: new Types.Bool(true),
        },
        constructorArgs: ['string'],
    },
    VideoTexture: {
        relativePath: './textures/VideoTexture',
    },
    BooleanKeyframeTrack: {
        relativePath: './animation/tracks/BooleanKeyframeTrack',
    },
    ColorKeyframeTrack: {
        relativePath: './animation/tracks/ColorKeyframeTrack',
    },
    NumberKeyframeTrack: {
        relativePath: './animation/tracks/NumberKeyframeTrack',
    },
    QuaternionKeyframeTrack: {
        relativePath: './animation/tracks/QuaternionKeyframeTrack',
    },
    StringKeyframeTrack: {
        relativePath: './animation/tracks/StringKeyframeTrack',
    },
    VectorKeyframeTrack: {
        relativePath: './animation/tracks/VectorKeyframeTrack',
    },
    Curve: {
        relativePath: './extras/core/Curve',
    },
    CurvePath: {
        relativePath: './extras/core/CurvePath',
    },
    Font: {
        relativePath: './extras/core/Font',
    },
    Path: {
        relativePath: './extras/core/Path',
    },
    Shape: {
        relativePath: './extras/core/Shape',
    },
    ArcCurve: {
        relativePath: './extras/curves/ArcCurve',
    },
    CatmullRomCurve3: {
        relativePath: './extras/curves/CatmullRomCurve3',
    },
    ClosedSplineCurve3: {
        relativePath: './extras/curves/ClosedSplineCurve3',
    },
    CubicBezierCurve: {
        relativePath: './extras/curves/CubicBezierCurve',
    },
    CubicBezierCurve3: {
        relativePath: './extras/curves/CubicBezierCurve3',
    },
    EllipseCurve: {
        relativePath: './extras/curves/EllipseCurve',
    },
    LineCurve: {
        relativePath: './extras/curves/LineCurve',
    },
    LineCurve3: {
        relativePath: './extras/curves/LineCurve3',
    },
    QuadraticBezierCurve: {
        relativePath: './extras/curves/QuadraticBezierCurve',
    },
    QuadraticBezierCurve3: {
        relativePath: './extras/curves/QuadraticBezierCurve3',
    },
    SplineCurve: {
        relativePath: './extras/curves/SplineCurve',
    },
    SplineCurve3: {
        relativePath: './extras/curves/SplineCurve3',
    },
    BoxBufferGeometry: {
        relativePath: './geometries/BoxBufferGeometry',
        superClass: 'BufferGeometry',
        constructorArgs: [ 'width', 'height', 'depth', 'widthSegments', 'heightSegments', 'depthSegments' ],
        properties: {
            width:          new Types.Float(10.0),
            height:         new Types.Float(10.0),
            depth:          new Types.Float(10.0),
            widthSegments:  new Types.Int(1),
            heightSegments: new Types.Int(1),
            depthSegments:  new Types.Int(1),
        },
        propsDefinedByThree: [ 'attributes', 'index' ],
    },
    BoxGeometry: {
        relativePath: './geometries/BoxGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'width', 'height', 'depth', 'widthSegments', 'heightSegments', 'depthSegments' ],
        properties: {
            width:          new Types.Float(10.0),
            height:         new Types.Float(10.0),
            depth:          new Types.Float(10.0),
            widthSegments:  new Types.Int(1),
            heightSegments: new Types.Int(1),
            depthSegments:  new Types.Int(1),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ]
    },
    CircleBufferGeometry: {
        relativePath: './geometries/CircleBufferGeometry',
        superClass: 'BufferGeometry',
        constructorArgs: [ 'radius', 'segments', 'thetaStart', 'thetaLength' ],
        properties: {
            radius:      new Types.Float(50.0),
            segments:    new Types.Int(8), // TODO: min:3
            thetaStart:  new Types.Float(0.0),
            thetaLength: new Types.Float(Math.PI * 2.0),
        },
        propsDefinedByThree: [ 'attributes', 'index' ],
    },
    CircleGeometry: {
        relativePath: './geometries/CircleGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'radius', 'segments', 'thetaStart', 'thetaLength' ],
        properties: {
            radius:      new Types.Float(50.0),
            segments:    new Types.Int(8), // TODO: min:3
            thetaStart:  new Types.Float(0.0),
            thetaLength: new Types.Float(Math.PI * 2.0),
        },
    },
    ConeGeometry: {
        relativePath: './geometries/ConeGeometry',
        superClass: 'Geometry',
        constructorArgs: ['radius', 'height', 'radialSegments', 'heightSegments', 'openEnded', 'thetaStart', 'thetaLength'],
        properties: {
            radius:         new Types.Float(20.0),
            height:         new Types.Float(100.0),
            radialSegments: new Types.Int(8),
            heightSegments: new Types.Int(1),
            openEnded:      new Types.Bool(false),
            thetaStart:     new Types.Float(0.0),
            thetaLength:    new Types.Float(Math.PI * 2.0),
        },
    },
    CylinderBufferGeometry: {
        relativePath: './geometries/CylinderGeometry',
        superClass: 'BufferGeometry',
        constructorArgs: [ 'radiusTop', 'radiusBottom', 'height', 'radiusSegments', 'heightSegments', 'openEnded', 'thetaStart', 'thetaLength' ],
        properties: {
            radiusTop:      new Types.Float(20.0),
            radiusBottom:   new Types.Float(20.0),
            height:         new Types.Float(100.0),
            radiusSegments: new Types.Int(8),
            heightSegments: new Types.Int(1),
            openEnded:      new Types.Bool(false),
            thetaStart:     new Types.Float(0.0),
            thetaLength:    new Types.Float(Math.PI * 2.0),
        },
        propsDefinedByThree: [ 'attributes', 'index' ],
    },
    CylinderGeometry: {
        relativePath: './geometries/CylinderGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'radiusTop', 'radiusBottom', 'height', 'radiusSegments', 'heightSegments', 'openEnded', 'thetaStart', 'thetaLength' ],
        properties: {
            radiusTop:      new Types.Float(20.0),
            radiusBottom:   new Types.Float(20.0),
            height:         new Types.Float(100.0),
            radiusSegments: new Types.Int(8),
            heightSegments: new Types.Int(1),
            openEnded:      new Types.Bool(false),
            thetaStart:     new Types.Float(0.0),
            thetaLength:    new Types.Float(Math.PI * 2.0),
        },
    },
    DodecahedronGeometry: {
        relativePath: './geometries/DodecahedronGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'radius', 'detail' ],
        properties: {
            radius: new Types.Float(1.0),
            detail: new Types.Int(0.0),
        },
    },
    // TODO:
    EdgesGeometry: {
        relativePath: './geometries/EdgesGeometry',
        superClass: 'Geometry',
    },
    // TODO: 
    ExtrudeGeometry: {
        relativePath: './geometries/ExtrudeGeometry',
        superClass: 'Geometry',
    },
    IcosahedronGeometry: {
        relativePath: './geometries/IcosahedronGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'radius', 'detail' ],
        properties: {
            radius: new Types.Float(1.0),
            detail: new Types.Int(0.0),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    LatheBufferGeometry: {
        relativePath: './geometries/LatheGeometry',
        superClass: 'BufferGeometry',
        constructorArgs: [ 'points', 'segments', 'phiStart', 'phiLength' ],
        properties: {
            points:    new Types.VectorArray(),
            segments:  new Types.Int(12),
            phiStart:  new Types.Float(0.0),
            phiLength: new Types.Float(Math.PI * 2.0),
        },
        propsDefinedByThree: [ 'attributes', 'index' ],
    },
    LatheGeometry: {
        relativePath: './geometries/LatheGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'points', 'segments', 'phiStart', 'phiLength' ],
        properties: {
            points:    new Types.VectorArray(),
            segments:  new Types.Int(12),
            phiStart:  new Types.Float(0.0),
            phiLength: new Types.Float(Math.PI * 2.0),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    OctahedronGeometry: {
        relativePath: './geometries/OctahedronGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'radius', 'detail' ],
        properties: {
            radius: new Types.Float(1.0),
            detail: new Types.Int(0.0),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    ParametricGeometry: {
        relativePath: './geometries/ParametricGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'func', 'slices', 'stacks' ],
        properties: {
            func:   new Types.Function(function(u,v) { return THREE.Vector3(); }),
            slices: new Types.Int(3), // NOTE: default not specified in three.js
            stacks: new Types.Int(3), // NOTE: default not specified in three.js
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    PlaneBufferGeometry: {
        relativePath: './geometries/PlaneGeometry',
        superClass: 'BufferGeometry',
        constructorArgs: [ 'width', 'height', 'widthSegments', 'heightSegments' ],
        properties: {
            width:          new Types.Float(10.0), // NOTE: default not specified in three.js
            height:         new Types.Float(10.0), // NOTE: default not specified in three.js
            widthSegments:  new Types.Int(1),
            heightSegments: new Types.Int(1),
        },
        propsDefinedByThree: [ 'attributes', 'index' ],
    },
    PlaneGeometry: {
        relativePath: './geometries/PlaneGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'width', 'height', 'widthSegments', 'heightSegments' ],
        properties: {
            width:          new Types.Float(10.0), // NOTE: default not specified in three.js
            height:         new Types.Float(10.0), // NOTE: default not specified in three.js
            widthSegments:  new Types.Int(1),
            heightSegments: new Types.Int(1),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    PolyhedronGeometry: {
        relativePath: './geometries/PolyhedronGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'vertices', 'faces', 'radius', 'detail' ],
        properties: {
            vertices: new Types.Array(),
            indices:  new Types.Array(),
            radius:   new Types.Float(1.0),
            detail:   new Types.Float(0.0),
            faces:    new Types.Array(),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    RingBufferGeometry: {
        relativePath: './geometries/RingGeometry',
        superClass: 'BufferGeometry',
        constructorArgs: [ 'innerRadius', 'outerRadius', 'thetaSegments', 'phiSegments', 'thetaStart', 'thetaLength' ],
        properties: {
            innerRadius:   new Types.Float(0.0), // Docs: "Default is 0, but it doesn't work right when innerRadius is set to 0.
            outerRadius:   new Types.Float(50.0),
            thetaSegments: new Types.Int(8), // TODO: min: 3
            phiSegments:   new Types.Int(8), // TODO: min 1
            thetaStart:    new Types.Float(0),
            thetaLength:   new Types.Float(Math.PI * 2),
        },
        propsDefinedByThree: [ 'attributes', 'index' ],
    },
    RingGeometry: {
        relativePath: './geometries/RingGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'innerRadius', 'outerRadius', 'thetaSegments', 'phiSegments', 'thetaStart', 'thetaLength' ],
        properties: {
            innerRadius:   new Types.Float(0.0), // Docs: "Default is 0, but it doesn't work right when innerRadius is set to 0.
            outerRadius:   new Types.Float(50.0),
            thetaSegments: new Types.Int(8), // TODO: min: 3
            phiSegments:   new Types.Int(8), // TODO: min 1
            thetaStart:    new Types.Float(0),
            thetaLength:   new Types.Float(Math.PI * 2),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    // TODO: figure out options constructor args + UVGenerator
    ShapeGeometry: {
        relativePath: './geometries/ShapeGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'shapes' ],
        properties: {
            shapes:        new Types.ThreeTypeArray('Shape'),
            curveSegments: new Types.Int(12), // NOTE: docs say this is unused
            material:      new Types.Int(0), // NOTE: no default specified
            // 'UVGenerator': // TODO: figure out this option
        }
    },
    SphereBufferGeometry: {
        relativePath: './geometries/SphereGeometry',
        superClass: 'BufferGeometry',
        constructorArgs: [ 'radius', 'widthSegments', 'heightSegments', 'phiStart', 'phiLength', 'thetaStart', 'thetaLength' ],
        properties: {
            radius:         new Types.Float(50.0),
            widthSegments:  new Types.Int(8),
            heightSegments: new Types.Int(6),
            phiStart:       new Types.Float(0),
            phiLength:      new Types.Float(Math.PI * 2.0),
            thetaStart:     new Types.Float(0),
            thetaLength:    new Types.Float(Math.PI),
        },
        propsDefinedByThree: [ 'attributes', 'index' ],
    },
    SphereGeometry: {
        relativePath: './geometries/SphereGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'radius', 'widthSegments', 'heightSegments', 'phiStart', 'phiLength', 'thetaStart', 'thetaLength' ],
        properties: {
            radius:         new Types.Float(50.0),
            widthSegments:  new Types.Int(8),
            heightSegments: new Types.Int(6),
            phiStart:       new Types.Float(0),
            phiLength:      new Types.Float(Math.PI * 2.0),
            thetaStart:     new Types.Float(0),
            thetaLength:    new Types.Float(Math.PI),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    TetrahedronGeometry: {
        relativePath: './geometries/TetrahedronGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'radius', 'detail' ],
        properties: {
            radius: new Types.Float(1),
            detail: new Types.Int(0),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    TextGeometry: {
        relativePath: './geometries/TextGeometry',
        superClass: 'Geometry',
    },
    TorusBufferGeometry: {
        relativePath: './geometries/TorusGeometry',
        superClass: 'BufferGeometry',
        constructorArgs: [ 'radius', 'tube', 'radialSegments', 'tubularSegments', 'arc' ],
        properties: {
            radius:          new Types.Float(100),
            tube:            new Types.Float(40),
            radialSegments:  new Types.Int(8),
            tubularSegments: new Types.Int(6),
            arc:             new Types.Float(Math.PI * 2.0),
        },
        propsDefinedByThree: [ 'attributes', 'index' ],
    },
    TorusGeometry: {
        relativePath: './geometries/TorusGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'radius', 'tube', 'radialSegments', 'tubularSegments', 'arc' ],
        properties: {
            radius:          new Types.Float(100),
            tube:            new Types.Float(40),
            radialSegments:  new Types.Int(8),
            tubularSegments: new Types.Int(6),
            arc:             new Types.Float(Math.PI * 2.0),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    TorusKnotBufferGeometry: {
        relativePath: './geometries/TorusKnotGeometry',
        superClass: 'BufferGeometry',
        constructorArgs: [ 'radius', 'tube', 'tubularSegments', 'radialSegments', 'p', 'q' ],
        properties: {
            radius:          new Types.Float(100),
            tube:            new Types.Float(40),
            tubularSegments: new Types.Int(64),
            radialSegments:  new Types.Int(8),
            p:               new Types.Int(2),
            q:               new Types.Int(3),
        },
        propsDefinedByThree: [ 'attributes', 'index' ],
    },
    TorusKnotGeometry: {
        relativePath: './geometries/TorusKnotGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'radius', 'tube', 'tubularSegments', 'radialSegments', 'p', 'q' ],
        properties: {
            radius:          new Types.Float(100),
            tube:            new Types.Float(40),
            tubularSegments: new Types.Int(64),
            radialSegments:  new Types.Int(8),
            p:               new Types.Int(2),
            q:               new Types.Int(3),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    TubeGeometry: {
        relativePath: './geometries/TubeGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'path', 'segments', 'radius', 'radiusSegments', 'close' ],
        properties: {
            path:           new Types.ThreeType('Curve'),
            segments:       new Types.Int(64),
            radius:         new Types.Float(1.0),
            radiusSegments: new Types.Int(8),
            close:          new Types.Bool(false),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    WireframeGeometry: {
        relativePath: './geometries/WireframeGeometry',
        superClass: 'Geometry',
        constructorArgs: [ 'geometry' ],
        properties: {
            geometry:       new Types.ThreeType(['Geometry', 'BufferGeometry']),
            // geometry:       new Types.ThreeType('Geometry'),
        },
        propsDefinedByThree: [ 'vertices', 'faces' ],
    },
    ArrowHelper: {
        relativePath: './extras/helpers/ArrowHelper',
    },
    AxisHelper: {
        relativePath: './extras/helpers/AxisHelper',
    },
    BoundingBoxHelper: {
        relativePath: './extras/helpers/BoundingBoxHelper',
    },
    BoxHelper: {
        relativePath: './extras/helpers/BoxHelper',
    },
    CameraHelper: {
        relativePath: './extras/helpers/CameraHelper',
    },
    DirectionalLightHelper: {
        relativePath: './extras/helpers/DirectionalLightHelper',
    },
    EdgesHelper: {
        relativePath: './extras/helpers/EdgesHelper',
    },
    FaceNormalsHelper: {
        relativePath: './extras/helpers/FaceNormalsHelper',
    },
    GridHelper: {
        relativePath: './extras/helpers/GridHelper',
    },
    HemisphereLightHelper: {
        relativePath: './extras/helpers/HemisphereLightHelper',
    },
    PointLightHelper: {
        relativePath: './extras/helpers/PointLightHelper',
    },
    SkeletonHelper: {
        relativePath: './extras/helpers/SkeletonHelper',
    },
    SpotLightHelper: {
        relativePath: './extras/helpers/SpotLightHelper',
    },
    VertexNormalsHelper: {
        relativePath: './extras/helpers/VertexNormalsHelper',
    },
    WireframeHelper: {
        relativePath: './extras/helpers/WireframeHelper',
    },
    ImmediateRenderObject: {
        relativePath: './extras/objects/ImmediateRenderObject',
    },
    MorphBlendMesh: {
        relativePath: './extras/objects/MorphBlendMesh',
    },
    CubicInterpolant: {
        relativePath: './math/interpolants/CubicInterpolant',
    },
    DiscreteInterpolant: {
        relativePath: './math/interpolants/DiscreteInterpolant',
    },
    LinearInterpolant: {
        relativePath: './math/interpolants/LinearInterpolant',
    },
    QuaternionLinearInterpolant: {
        relativePath: './math/interpolants/QuaternionLinearInterpolant',
    },
    ShaderChunk: {
        relativePath: './renderers/shaders/ShaderChunk',
    },
    ShaderLib: {
        relativePath: './renderers/shaders/ShaderLib',
    },
    UniformsLib: {
        relativePath: './renderers/shaders/UniformsLib',
    },
    UniformsUtils: {
        relativePath: './renderers/shaders/UniformsUtils',
    },
    WebGLBufferRenderer: {
        relativePath: './renderers/webgl/WebGLBufferRenderer',
    },
    WebGLCapabilities: {
        relativePath: './renderers/webgl/WebGLCapabilities',
    },
    WebGLExtensions: {
        relativePath: './renderers/webgl/WebGLExtensions',
    },
    WebGLGeometries: {
        relativePath: './renderers/webgl/WebGLGeometries',
    },
    WebGLIndexedBufferRenderer: {
        relativePath: './renderers/webgl/WebGLIndexedBufferRenderer',
    },
    WebGLLights: {
        relativePath: './renderers/webgl/WebGLLights',
    },
    WebGLObjects: {
        relativePath: './renderers/webgl/WebGLObjects',
    },
    WebGLProgram: {
        relativePath: './renderers/webgl/WebGLProgram',
    },
    WebGLPrograms: {
        relativePath: './renderers/webgl/WebGLPrograms',
    },
    WebGLProperties: {
        relativePath: './renderers/webgl/WebGLProperties',
    },
    WebGLShader: {
        relativePath: './renderers/webgl/WebGLShader',
    },
    WebGLShadowMap: {
        relativePath: './renderers/webgl/WebGLShadowMap',
        properties: {
            enabled: new Types.Bool(false),
            type: new Types.Enum('ShadowTypes', 'PCFShadowMap'),
            renderReverseSided: new Types.Bool(false),
            renderSingleSided: new Types.Bool(true),
        }
    },
    WebGLState: {
        relativePath: './renderers/webgl/WebGLState',
    },
    LensFlarePlugin: {
        relativePath: './renderers/webgl/plugins/LensFlarePlugin',
    },
    SpritePlugin: {
        relativePath: './renderers/webgl/plugins/SpritePlugin',
    },
};
